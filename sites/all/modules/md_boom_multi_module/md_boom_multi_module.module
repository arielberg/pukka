<?php
function md_boom_multi_module_menu(){
  $items['md_boom_multi_module/tweet'] = array(
    'title' => t('Twitter Feed'),
    'description' => t('Display lastest tweet of twitter account'),
    'page callback' => 'tweet_content',
    'access callback' => true,
    'access arguments' => array('access content'),
  );
  $items['ajax_node'] = array(
    'page callback' => 'ajax_node',
    'access callback' => true,
    'access arguments' => array('access content'),
  );
  $items['header_demo'] = array(
    'page callback' => 'header_demo',
    'access callback'   => true,
    'access arguments' => array('access content'),
  );
  return $items;
}
/**
 * Get header demo to page
 */
function header_demo(){
  if(isset($_POST['header'])){
    $header = $_POST['header'];
    switch($header){
      case 'header1':
        require_once DRUPAL_ROOT . '/' . drupal_get_path('theme', 'md_boom_multi') . '/header/header1.inc';
        $header1 = header1();
        echo $header1;
        break;
      case 'header2':
        require_once DRUPAL_ROOT . '/' . drupal_get_path('theme', 'md_boom_multi') . '/header/header2.inc';
        $header2 = header2();
        echo $header2;
        break;
      case 'header3':
        require_once DRUPAL_ROOT . '/' . drupal_get_path('theme', 'md_boom_multi') . '/header/header3.inc';
        $header3 = header3();
        echo $header3;
        break;
      case 'header4':
        require_once DRUPAL_ROOT . '/' . drupal_get_path('theme', 'md_boom_multi') . '/header/header4.inc';
        $header4 = header4();
        echo $header4;
        break;
    }
  }
}
/**
 * Get only node and comment html data
 */
function ajax_node(){
  if(isset($_POST['nodeid'])){
    $nid = $_POST['nodeid'];
    $node = node_load($nid);
    if($node->type == 'portfolio'){
      $node_view = node_view($node,'teaser');
      echo drupal_render($node_view);
    }
  }
  if(isset($_GET['nid'])){
    $nid = $_GET['nid'];
    $node = node_load($nid);
    if($node->type == 'blog'){
      $node_view = node_view($node,'full');
      $node_view['comments'] = comment_node_page_additions($node);
      echo drupal_render($node_view);
    }
  }
}
/**
 * Get json data from twitter with OAuth library
 */
function tweet_content(){
  $consumer_key = variable_get('twitter_consumer_key');

  $consumer_secret = variable_get('twitter_consumer_secret');

  $access_token = variable_get('twitter_access_token');

  $secret_token = variable_get('twitter_access_token_secret');

  if(empty($consumer_key) || empty($consumer_secret) || empty($access_token) || empty($secret_token)) { die(); }
  class ezTweet {
    /*************************************** config ***************************************/

    // Path to tmhOAuth libraries
    private $lib = './lib/';

    // Enable caching
    private $cache_enabled = false;

    // Cache interval (minutes)
    private $cache_interval = 15;

    // Path to writable cache directory
    private $cache_dir = './cache';

    // Enable debugging
    private $debug = true;

    /**************************************************************************************/

    public function __construct() {
      // Initialize paths and etc.
      $this->pathify($this->cache_dir);
      $this->pathify($this->lib);
      $this->message = '';

      // Set server-side debug params
      if($this->debug === true) {
        error_reporting(-1);
      } else {
        error_reporting(0);
      }
    }

    public function fetch() {
      echo json_encode(
        array(
          'response' => json_decode($this->getJSON(), true),
          'message' => ($this->debug) ? $this->message : false
        )
      );

    }

    private function getJSON() {
      if($this->cache_enabled === true) {
        $CFID = $this->generateCFID();
        $cache_file = $this->cache_dir.$CFID;

        if(file_exists($cache_file) && (filemtime($cache_file) > (time() - 60 * intval($this->cache_interval)))) {
          return file_get_contents($cache_file, FILE_USE_INCLUDE_PATH);
        } else {

          $JSONraw = $this->getTwitterJSON();
          $JSON = $JSONraw['response'];

          // Don't write a bad cache file if there was a CURL error
          if($JSONraw['errno'] != 0) {
            $this->consoleDebug($JSONraw['error']);
            return $JSON;
          }

          if($this->debug === true) {
            // Check for twitter-side errors
            $pj = json_decode($JSON, true);
            if(isset($pj['errors'])) {
              foreach($pj['errors'] as $error) {
                $message = 'Twitter Error: "'.$error['message'].'", Error Code #'.$error['code'];
                $this->consoleDebug($message);
              }
              return false;
            }
          }

          if(is_writable($this->cache_dir) && $JSONraw) {
            if(file_put_contents($cache_file, $JSON, LOCK_EX) === false) {
              $this->consoleDebug("Error writing cache file");
            }
          } else {
            $this->consoleDebug("Cache directory is not writable");
          }
          return $JSON;
        }
      } else {
        $JSONraw = $this->getTwitterJSON();

        if($this->debug === true) {
          // Check for CURL errors
          if($JSONraw['errno'] != 0) {
            $this->consoleDebug($JSONraw['error']);
          }

          // Check for twitter-side errors
          $pj = json_decode($JSONraw['response'], true);
          if(isset($pj['errors'])) {
            foreach($pj['errors'] as $error) {
              $message = 'Twitter Error: "'.$error['message'].'", Error Code #'.$error['code'];
              $this->consoleDebug($message);
            }
            return false;
          }
        }
        return $JSONraw['response'];
      }
    }

    private function getTwitterJSON() {
      $path = drupal_get_path('module','md_boom_multi_module');
      include_once($path.'/twitter/lib/tmhOAuth.php');
      include_once($path.'/twitter/lib/tmhUtilities.php');


      $tmhOAuth = new tmhOAuth(array(
        'host'                  => $_POST['request']['host'],
        'consumer_key'          => variable_get('twitter_consumer_key'),
        'consumer_secret'       => variable_get('twitter_consumer_secret'),
        'user_token'            => variable_get('twitter_access_token'),
        'user_secret'           => variable_get('twitter_access_token_secret'),
        'curl_ssl_verifypeer'   => false
      ));

      $url = $_POST['request']['url'];
      $params = $_POST['request']['parameters'];

      $tmhOAuth->request('GET', $tmhOAuth->url($url), $params);
      return $tmhOAuth->response;
    }

    private function generateCFID() {
      // The unique cached filename ID
      return md5(serialize($_POST)).'.json';
    }

    private function pathify(&$path) {
      // Ensures our user-specified paths are up to snuff
      $path = realpath($path).'/';
    }

    private function consoleDebug($message) {
      if($this->debug === true) {
        $this->message .= 'tweet.js: '.$message."\n";
      }
    }
  }

  $ezTweet = new ezTweet();
  $ezTweet->fetch();

}
/*
 * Hook_block_info
 */
function md_boom_multi_module_block_info() {
  $blocks['twitter'] = array(
    'info' => t('Twitter block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['flickr'] = array(
    'info'  => t('Flickr Block'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['footer_column_1'] = array(
    'info' => t('Footer Column 1'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['footer_column_2'] = array(
    'info' => t('Footer Column 2'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['footer_column_3'] = array(
    'info' => t('Footer Column 3'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['footer_column_4'] = array(
    'info' => t('Footer Column 4'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}
/**
 * Implement hook_block_view
 * @return data
 */
function md_boom_multi_module_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'twitter':
      $block['subject'] = t('Latest Tweet');
      $twitter_account = variable_get('twitter_username');
      $twitter_max = variable_get('twitter_num');
      if(isset($twitter_account) && isset($twitter_max)){
        drupal_add_js(array('twitter_account'=>$twitter_account),'setting');
        drupal_add_js(array('twitter_num'=>$twitter_max),'setting');
        drupal_add_js(drupal_get_path('module', 'md_boom_multi_module') . '/js/jquery.tweet.js',array(
          'scope' => 'footer',
        ));
        drupal_add_js(drupal_get_path('module', 'md_boom_multi_module') . '/js/script.js',array(
          'scope' => 'footer',
        ));
      }
      $block['content'] = '<aside class="widget twitter-widget';
      if(theme_get_setting('widget_style','md_boom_multi')){
        switch(theme_get_setting('widget_style','md_boom_multi')){
          case 'widget1':
            $block['content'] .= t(' w-style1');
            break;
          case 'widget2':
            $block['content'] .= t(' w-style2');
            break;
          case 'widget3':
            $block['content'] .= t(' w-style3');
            break;
          case 'widget4':
            $block['content'] .= t(' w-style4');
            break;
          case 'widget5':
            $block['content'] .= t(' w-style5');
            break;
        }
      }
      $block['content'] .= '">
                     <h2 class="widget-title ">Twitter Widget</h2>
                        <div class="twitter_outer">
                            <div class="twitter_inner"></div>
                        </div>
                    </aside><!--end:widget-->';
      break;
    case 'flickr':
      $block['subject'] = t('Flickr');
      $block['content'] = '<aside class="widget';
      if(theme_get_setting('widget_style','md_boom_multi')){
        switch(theme_get_setting('widget_style','md_boom_multi')){
          case 'widget1':
            $block['content'] .= t(' w-style1');
            break;
          case 'widget2':
            $block['content'] .= t(' w-style2');
            break;
          case 'widget3':
            $block['content'] .= t(' w-style3');
            break;
          case 'widget4':
            $block['content'] .= t(' w-style4');
            break;
          case 'widget5':
            $block['content'] .= t(' w-style5');
            break;
        }
      }
      $block['content'] .= '">
                        <h2 class="widget-title">Flickr Widget</h2>
                        <div class="flickr-wrap clearfix" id="flickr-feed-1">
                            <ul class="flx-flickr-widget clearfix"></ul>
                        </div><!--flickr-wrap-->
                    </aside><!--end:widget-->';
    case 'footer_column_1':
      $block['subject'] = t('Our Office');
      $block['content'] = '';
      break;
    case 'footer_column_2':
      $block['subject'] = t('Boom Pages');
      $block['content'] = '';
      break;
    case 'footer_column_3':
      $block['subject'] = t('About us');
      $block['content'] = '';
      break;
    case 'footer_column_4':
      $block['subject'] = t('Twitter Update');
      $block['content'] = '';
      break;
  }
  return $block;
}

function md_boom_multi_module_block_view_alter(&$data, $block) {
  $delta = $block->delta;
  $module = $block->module;
  if($module == 'md_boom_multi_module' && $delta == 'footer_column_1') {
      $data['content'] = '<div class="span4">
                <aside class="widget">
                <h5 class="widget-title">';
      $data['content'] .= $block->title ? $block->title : $data['subject'];
      $data['content'] .= '</h5>
                <ul class="contact-info">
                    <li><strong>טלפון</strong><span>:&nbsp;'.theme_get_setting('phone','md_boom_multi').'</span></li>
                    <li><strong>טלפון</strong><span>:&nbsp;'.theme_get_setting('fax','md_boom_multi').'</span></li>
                    '.theme_get_setting('address','md_boom_multi').'
                </ul><!--end:contact-info-->
                </aside><!--end:widget-->
                </div><!--end:span4-->';
  }
  if($module == 'md_boom_multi_module' && $delta == 'footer_column_2') {
    $footer_menu_col_2 = menu_navigation_links('menu-footer-column-2'); //menu-footer-column-2 : Machine name of footer menu column 2
    $data['content'] = '<div class="span2">
                    <aside class="widget">
                        <h5 class="widget-title">';
    $data['content'] .= ($block->title ? $block->title : $data['subject']).'</h5>
                        <ul>';
    foreach($footer_menu_col_2 as $key => $menu) {
      $data['content'] .= '<li>+&nbsp;<a href="'.$menu['href'].'">'.$menu['title'].'</a></li>';
    }

    $data['content'] .= '</ul>
                    </aside><!--end:widget-->
                </div><!--end:span2-->';
  }
  if($module == 'md_boom_multi_module' && $delta == 'footer_column_3') {
    $footer_menu_col_3 = menu_navigation_links('menu-footer-column-3'); //menu-footer-column-3 : Machine name of footer menu column 3
    $data['content'] = '<div class="span2">
                        <aside class="widget">
                            <h5 class="widget-title">';
    $data['content'] .= ($block->title ? $block->title : $data['subject']).'</h5>
                        <ul>';
    foreach($footer_menu_col_3 as $key => $menu) {
      $data['content'] .= '<li>+&nbsp;<a href="'.$menu['href'].'">'.$menu['title'].'</a></li>';
    }
    $data['content'] .= '</ul>
                        </aside><!--end:widget-->
                    </div><!--end:span2-->';
  }
  if($module == 'md_boom_multi_module' && $delta == 'footer_column_4') {
    $data['content'] .= '<div class="span4">
                                <aside class="widget">
                                    <h5 class="widget-title">';
    $data['content'] .= ($block->title ? $block->title : $data['subject']);

    $data['content'] .= '</h5>
                            <div class="twitter_outer">
                                <div class="twitter_inner"></div>
                            </div>
                        </aside><!--end:widget-->
                    </div><!--end:span4-->';
  }

}
/**
 * Implements mod_bonv_bl_block_configure().
 * Creat form to input data from Twitter App
 */
function md_boom_multi_module_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'twitter' :
      // Text field form element
      $form['twitter_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Twitter Account Settings'),
        '#description' => 'Modify your data from Twitter account',
      );
      $form['twitter_settings']['twitter_username'] = array(
        '#type' => 'textfield',
        '#title'    =>  t('Twitter username'),
        '#size'         => '15',
        '#required'      => true,
        '#default_value'    => variable_get('twitter_username','megadrupal')
      );
      $form['twitter_settings']['twitter_num'] = array(
        '#type'     => 'textfield',
        '#title'    => t('Tweets Posts'),
        '#size'     => '5',
        '#default_value'    => variable_get('twitter_num','3'),
      );
      $form['twitter_settings']['twitter_consumer_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Consumer key'),
        '#description' => t('Enter your consumer key from your twitter app'),
        '#maxlength' => '50',
        '#default_value' => variable_get('twitter_consumer_key', '14XiEso9DKiEkhdejwvfLA'),
      );
      $form['twitter_settings']['twitter_consumer_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Consumer secret'),
        '#description' => t('Enter your consumer secret string from your twitter app'),
        '#maxlength' => '50',
        '#default_value' => variable_get('twitter_consumer_secret', 'K1IcprfP7ZtHW9SM9pag9YWJ0jUWi6vAWZ3hX2FvspI'),
      );
      $form['twitter_settings']['twitter_access_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Access Token'),
        '#description' => t('Enter your access token string from your twitter app'),
        '#maxlength' => '50',
        '#default_value' => variable_get('twitter_access_token', '234626957-zSPIRl4nvdXvzffaXjZUZNVFxleenIQjOS2B749p'),
      );
      $form['twitter_settings']['twitter_access_token_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Access Token Secret'),
        '#description' => t('Enter your access token secret string from your twitter app'),
        '#maxlength' => '50',
        '#default_value' => variable_get('twitter_access_token_secret', 'PAiDJWzd1nqVm2pzMnnFeY5OW1OiCieXSqkivO6PUM'),
      );

      break;
    case 'flickr':
      $form['flickr_settings']['flickr_id'] = array(
        '#type' => 'textfield',
        '#title'    =>  t('Flickr Id'),
        '#size'         => '15',
        '#required'      => true,
        '#default_value'    => variable_get('flickr_id') ? variable_get('flickr_id') : '92032055@N03',
      );
      $form['flickr_settings']['flickr_num'] = array(
        '#type'     => 'textfield',
        '#title'    => t('Flickr Images Number'),
        '#size'     => '5',
        '#default_value'    => variable_get('flickr_num') ? variable_get('flickr_num') : '6',
      );
      break;
  }
  return $form;
}
/**
 * Implements md_boom_multi_module_block_save().
 * Save data
 */
function md_boom_multi_module_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'twitter' :
      // Saving the user input twitter data
      variable_set('twitter_username', $edit['twitter_username']);
      variable_set('twitter_num', $edit['twitter_num']);
      variable_set('twitter_consumer_key', $edit['twitter_consumer_key']);
      variable_set('twitter_consumer_secret', $edit['twitter_consumer_secret']);
      variable_set('twitter_access_token', $edit['twitter_access_token']);
      variable_set('twitter_access_token_secret', $edit['twitter_access_token_secret']);
      break;
    case 'flickr':
      // Saving the user input flickr data
      variable_set('flickr_id', $edit['flickr_id']);
      variable_set('flickr_num', $edit['flickr_num']);
      break;
  }
}
function md_boom_multi_module_form_alter(&$form, &$form_state, $form_id){
  switch($form_id){
    case 'portfolio_node_form':
      break;
    case 'menu_edit_item':
      $mlid = $form['mlid']['#value'];
      $no_link = variable_get('menu_no_link_'.$mlid.'');
      $form['no_link'] = array(
        '#type'  => 'checkbox',
        '#title'    => t('No Link'),
        '#description'  => t('Menu links is target none. Put anything to link path field'),
        '#default_value'    => $no_link ? $no_link : 0,
      );
      $form['#submit'][] = 'menu_edit_item_submit_alter';
      break;
  }
}
function menu_edit_item_submit_alter($form, &$form_state) {
  $no_link = $form_state['values']['no_link'];
  $mlid = $form_state['values']['mlid'];
  variable_set('menu_no_link_'.$mlid.'',$no_link);
}
